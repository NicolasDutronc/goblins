// Code generated by mockery v2.28.2. DO NOT EDIT.

package task

import mock "github.com/stretchr/testify/mock"

// MockTaskDispatcher is an autogenerated mock type for the TaskDispatcher type
type MockTaskDispatcher struct {
	mock.Mock
}

type MockTaskDispatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTaskDispatcher) EXPECT() *MockTaskDispatcher_Expecter {
	return &MockTaskDispatcher_Expecter{mock: &_m.Mock}
}

// SendActivityTask provides a mock function with given fields: workflowId, workflowRunId, activityId, activityRunId, maxRetry, currentTry, input
func (_m *MockTaskDispatcher) SendActivityTask(workflowId string, workflowRunId string, activityId string, activityRunId string, maxRetry int32, currentTry int32, input []byte) error {
	ret := _m.Called(workflowId, workflowRunId, activityId, activityRunId, maxRetry, currentTry, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, int32, int32, []byte) error); ok {
		r0 = rf(workflowId, workflowRunId, activityId, activityRunId, maxRetry, currentTry, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTaskDispatcher_SendActivityTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendActivityTask'
type MockTaskDispatcher_SendActivityTask_Call struct {
	*mock.Call
}

// SendActivityTask is a helper method to define mock.On call
//   - workflowId string
//   - workflowRunId string
//   - activityId string
//   - activityRunId string
//   - maxRetry int32
//   - currentTry int32
//   - input []byte
func (_e *MockTaskDispatcher_Expecter) SendActivityTask(workflowId interface{}, workflowRunId interface{}, activityId interface{}, activityRunId interface{}, maxRetry interface{}, currentTry interface{}, input interface{}) *MockTaskDispatcher_SendActivityTask_Call {
	return &MockTaskDispatcher_SendActivityTask_Call{Call: _e.mock.On("SendActivityTask", workflowId, workflowRunId, activityId, activityRunId, maxRetry, currentTry, input)}
}

func (_c *MockTaskDispatcher_SendActivityTask_Call) Run(run func(workflowId string, workflowRunId string, activityId string, activityRunId string, maxRetry int32, currentTry int32, input []byte)) *MockTaskDispatcher_SendActivityTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(int32), args[5].(int32), args[6].([]byte))
	})
	return _c
}

func (_c *MockTaskDispatcher_SendActivityTask_Call) Return(_a0 error) *MockTaskDispatcher_SendActivityTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTaskDispatcher_SendActivityTask_Call) RunAndReturn(run func(string, string, string, string, int32, int32, []byte) error) *MockTaskDispatcher_SendActivityTask_Call {
	_c.Call.Return(run)
	return _c
}

// SendWorkflowTask provides a mock function with given fields: workflowId, workflowRunId, input
func (_m *MockTaskDispatcher) SendWorkflowTask(workflowId string, workflowRunId string, input []byte) error {
	ret := _m.Called(workflowId, workflowRunId, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []byte) error); ok {
		r0 = rf(workflowId, workflowRunId, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTaskDispatcher_SendWorkflowTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendWorkflowTask'
type MockTaskDispatcher_SendWorkflowTask_Call struct {
	*mock.Call
}

// SendWorkflowTask is a helper method to define mock.On call
//   - workflowId string
//   - workflowRunId string
//   - input []byte
func (_e *MockTaskDispatcher_Expecter) SendWorkflowTask(workflowId interface{}, workflowRunId interface{}, input interface{}) *MockTaskDispatcher_SendWorkflowTask_Call {
	return &MockTaskDispatcher_SendWorkflowTask_Call{Call: _e.mock.On("SendWorkflowTask", workflowId, workflowRunId, input)}
}

func (_c *MockTaskDispatcher_SendWorkflowTask_Call) Run(run func(workflowId string, workflowRunId string, input []byte)) *MockTaskDispatcher_SendWorkflowTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *MockTaskDispatcher_SendWorkflowTask_Call) Return(_a0 error) *MockTaskDispatcher_SendWorkflowTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTaskDispatcher_SendWorkflowTask_Call) RunAndReturn(run func(string, string, []byte) error) *MockTaskDispatcher_SendWorkflowTask_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockTaskDispatcher interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTaskDispatcher creates a new instance of MockTaskDispatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTaskDispatcher(t mockConstructorTestingTNewMockTaskDispatcher) *MockTaskDispatcher {
	mock := &MockTaskDispatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
