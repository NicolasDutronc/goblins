// Code generated by mockery v2.28.2. DO NOT EDIT.

package event

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockEventRepository is an autogenerated mock type for the EventRepository type
type MockEventRepository struct {
	mock.Mock
}

type MockEventRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventRepository) EXPECT() *MockEventRepository_Expecter {
	return &MockEventRepository_Expecter{mock: &_m.Mock}
}

// GetActivityRunEvents provides a mock function with given fields: ctx, workflowRunId, activityRunId
func (_m *MockEventRepository) GetActivityRunEvents(ctx context.Context, workflowRunId string, activityRunId string) ([]*WorkflowEvent, error) {
	ret := _m.Called(ctx, workflowRunId, activityRunId)

	var r0 []*WorkflowEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*WorkflowEvent, error)); ok {
		return rf(ctx, workflowRunId, activityRunId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*WorkflowEvent); ok {
		r0 = rf(ctx, workflowRunId, activityRunId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*WorkflowEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, workflowRunId, activityRunId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventRepository_GetActivityRunEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActivityRunEvents'
type MockEventRepository_GetActivityRunEvents_Call struct {
	*mock.Call
}

// GetActivityRunEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowRunId string
//   - activityRunId string
func (_e *MockEventRepository_Expecter) GetActivityRunEvents(ctx interface{}, workflowRunId interface{}, activityRunId interface{}) *MockEventRepository_GetActivityRunEvents_Call {
	return &MockEventRepository_GetActivityRunEvents_Call{Call: _e.mock.On("GetActivityRunEvents", ctx, workflowRunId, activityRunId)}
}

func (_c *MockEventRepository_GetActivityRunEvents_Call) Run(run func(ctx context.Context, workflowRunId string, activityRunId string)) *MockEventRepository_GetActivityRunEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockEventRepository_GetActivityRunEvents_Call) Return(_a0 []*WorkflowEvent, _a1 error) *MockEventRepository_GetActivityRunEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventRepository_GetActivityRunEvents_Call) RunAndReturn(run func(context.Context, string, string) ([]*WorkflowEvent, error)) *MockEventRepository_GetActivityRunEvents_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowRunEvents provides a mock function with given fields: ctx, workflowRunId
func (_m *MockEventRepository) GetWorkflowRunEvents(ctx context.Context, workflowRunId string) ([]*WorkflowEvent, error) {
	ret := _m.Called(ctx, workflowRunId)

	var r0 []*WorkflowEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*WorkflowEvent, error)); ok {
		return rf(ctx, workflowRunId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*WorkflowEvent); ok {
		r0 = rf(ctx, workflowRunId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*WorkflowEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, workflowRunId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventRepository_GetWorkflowRunEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowRunEvents'
type MockEventRepository_GetWorkflowRunEvents_Call struct {
	*mock.Call
}

// GetWorkflowRunEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowRunId string
func (_e *MockEventRepository_Expecter) GetWorkflowRunEvents(ctx interface{}, workflowRunId interface{}) *MockEventRepository_GetWorkflowRunEvents_Call {
	return &MockEventRepository_GetWorkflowRunEvents_Call{Call: _e.mock.On("GetWorkflowRunEvents", ctx, workflowRunId)}
}

func (_c *MockEventRepository_GetWorkflowRunEvents_Call) Run(run func(ctx context.Context, workflowRunId string)) *MockEventRepository_GetWorkflowRunEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockEventRepository_GetWorkflowRunEvents_Call) Return(_a0 []*WorkflowEvent, _a1 error) *MockEventRepository_GetWorkflowRunEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventRepository_GetWorkflowRunEvents_Call) RunAndReturn(run func(context.Context, string) ([]*WorkflowEvent, error)) *MockEventRepository_GetWorkflowRunEvents_Call {
	_c.Call.Return(run)
	return _c
}

// StoreEvent provides a mock function with given fields: ctx, event
func (_m *MockEventRepository) StoreEvent(ctx context.Context, event *WorkflowEvent) error {
	ret := _m.Called(ctx, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *WorkflowEvent) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventRepository_StoreEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreEvent'
type MockEventRepository_StoreEvent_Call struct {
	*mock.Call
}

// StoreEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - event *WorkflowEvent
func (_e *MockEventRepository_Expecter) StoreEvent(ctx interface{}, event interface{}) *MockEventRepository_StoreEvent_Call {
	return &MockEventRepository_StoreEvent_Call{Call: _e.mock.On("StoreEvent", ctx, event)}
}

func (_c *MockEventRepository_StoreEvent_Call) Run(run func(ctx context.Context, event *WorkflowEvent)) *MockEventRepository_StoreEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*WorkflowEvent))
	})
	return _c
}

func (_c *MockEventRepository_StoreEvent_Call) Return(_a0 error) *MockEventRepository_StoreEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventRepository_StoreEvent_Call) RunAndReturn(run func(context.Context, *WorkflowEvent) error) *MockEventRepository_StoreEvent_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockEventRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEventRepository creates a new instance of MockEventRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEventRepository(t mockConstructorTestingTNewMockEventRepository) *MockEventRepository {
	mock := &MockEventRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
