// Code generated by mockery v2.28.2. DO NOT EDIT.

package event

import mock "github.com/stretchr/testify/mock"

// MockEventDispatcher is an autogenerated mock type for the EventDispatcher type
type MockEventDispatcher struct {
	mock.Mock
}

type MockEventDispatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventDispatcher) EXPECT() *MockEventDispatcher_Expecter {
	return &MockEventDispatcher_Expecter{mock: &_m.Mock}
}

// SendActivityFinishedInErrorEvent provides a mock function with given fields: workflowId, workflowRunId, activityId, activityRunId, maxRetries, currentTry, input, err
func (_m *MockEventDispatcher) SendActivityFinishedInErrorEvent(workflowId string, workflowRunId string, activityId string, activityRunId string, maxRetries int32, currentTry int32, input []byte, err error) error {
	ret := _m.Called(workflowId, workflowRunId, activityId, activityRunId, maxRetries, currentTry, input, err)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, int32, int32, []byte, error) error); ok {
		r0 = rf(workflowId, workflowRunId, activityId, activityRunId, maxRetries, currentTry, input, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventDispatcher_SendActivityFinishedInErrorEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendActivityFinishedInErrorEvent'
type MockEventDispatcher_SendActivityFinishedInErrorEvent_Call struct {
	*mock.Call
}

// SendActivityFinishedInErrorEvent is a helper method to define mock.On call
//   - workflowId string
//   - workflowRunId string
//   - activityId string
//   - activityRunId string
//   - maxRetries int32
//   - currentTry int32
//   - input []byte
//   - err error
func (_e *MockEventDispatcher_Expecter) SendActivityFinishedInErrorEvent(workflowId interface{}, workflowRunId interface{}, activityId interface{}, activityRunId interface{}, maxRetries interface{}, currentTry interface{}, input interface{}, err interface{}) *MockEventDispatcher_SendActivityFinishedInErrorEvent_Call {
	return &MockEventDispatcher_SendActivityFinishedInErrorEvent_Call{Call: _e.mock.On("SendActivityFinishedInErrorEvent", workflowId, workflowRunId, activityId, activityRunId, maxRetries, currentTry, input, err)}
}

func (_c *MockEventDispatcher_SendActivityFinishedInErrorEvent_Call) Run(run func(workflowId string, workflowRunId string, activityId string, activityRunId string, maxRetries int32, currentTry int32, input []byte, err error)) *MockEventDispatcher_SendActivityFinishedInErrorEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(int32), args[5].(int32), args[6].([]byte), args[7].(error))
	})
	return _c
}

func (_c *MockEventDispatcher_SendActivityFinishedInErrorEvent_Call) Return(_a0 error) *MockEventDispatcher_SendActivityFinishedInErrorEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventDispatcher_SendActivityFinishedInErrorEvent_Call) RunAndReturn(run func(string, string, string, string, int32, int32, []byte, error) error) *MockEventDispatcher_SendActivityFinishedInErrorEvent_Call {
	_c.Call.Return(run)
	return _c
}

// SendActivityFinishedInSuccessEvent provides a mock function with given fields: workflowId, workflowRunId, activityId, activityRunId, maxRetries, currentTry, input, output
func (_m *MockEventDispatcher) SendActivityFinishedInSuccessEvent(workflowId string, workflowRunId string, activityId string, activityRunId string, maxRetries int32, currentTry int32, input []byte, output []byte) error {
	ret := _m.Called(workflowId, workflowRunId, activityId, activityRunId, maxRetries, currentTry, input, output)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, int32, int32, []byte, []byte) error); ok {
		r0 = rf(workflowId, workflowRunId, activityId, activityRunId, maxRetries, currentTry, input, output)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventDispatcher_SendActivityFinishedInSuccessEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendActivityFinishedInSuccessEvent'
type MockEventDispatcher_SendActivityFinishedInSuccessEvent_Call struct {
	*mock.Call
}

// SendActivityFinishedInSuccessEvent is a helper method to define mock.On call
//   - workflowId string
//   - workflowRunId string
//   - activityId string
//   - activityRunId string
//   - maxRetries int32
//   - currentTry int32
//   - input []byte
//   - output []byte
func (_e *MockEventDispatcher_Expecter) SendActivityFinishedInSuccessEvent(workflowId interface{}, workflowRunId interface{}, activityId interface{}, activityRunId interface{}, maxRetries interface{}, currentTry interface{}, input interface{}, output interface{}) *MockEventDispatcher_SendActivityFinishedInSuccessEvent_Call {
	return &MockEventDispatcher_SendActivityFinishedInSuccessEvent_Call{Call: _e.mock.On("SendActivityFinishedInSuccessEvent", workflowId, workflowRunId, activityId, activityRunId, maxRetries, currentTry, input, output)}
}

func (_c *MockEventDispatcher_SendActivityFinishedInSuccessEvent_Call) Run(run func(workflowId string, workflowRunId string, activityId string, activityRunId string, maxRetries int32, currentTry int32, input []byte, output []byte)) *MockEventDispatcher_SendActivityFinishedInSuccessEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(int32), args[5].(int32), args[6].([]byte), args[7].([]byte))
	})
	return _c
}

func (_c *MockEventDispatcher_SendActivityFinishedInSuccessEvent_Call) Return(_a0 error) *MockEventDispatcher_SendActivityFinishedInSuccessEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventDispatcher_SendActivityFinishedInSuccessEvent_Call) RunAndReturn(run func(string, string, string, string, int32, int32, []byte, []byte) error) *MockEventDispatcher_SendActivityFinishedInSuccessEvent_Call {
	_c.Call.Return(run)
	return _c
}

// SendActivityScheduledEvent provides a mock function with given fields: workflowId, workflowRunId, activityId, activityRunId, maxRetries, currentTry, input
func (_m *MockEventDispatcher) SendActivityScheduledEvent(workflowId string, workflowRunId string, activityId string, activityRunId string, maxRetries int32, currentTry int32, input []byte) error {
	ret := _m.Called(workflowId, workflowRunId, activityId, activityRunId, maxRetries, currentTry, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, int32, int32, []byte) error); ok {
		r0 = rf(workflowId, workflowRunId, activityId, activityRunId, maxRetries, currentTry, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventDispatcher_SendActivityScheduledEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendActivityScheduledEvent'
type MockEventDispatcher_SendActivityScheduledEvent_Call struct {
	*mock.Call
}

// SendActivityScheduledEvent is a helper method to define mock.On call
//   - workflowId string
//   - workflowRunId string
//   - activityId string
//   - activityRunId string
//   - maxRetries int32
//   - currentTry int32
//   - input []byte
func (_e *MockEventDispatcher_Expecter) SendActivityScheduledEvent(workflowId interface{}, workflowRunId interface{}, activityId interface{}, activityRunId interface{}, maxRetries interface{}, currentTry interface{}, input interface{}) *MockEventDispatcher_SendActivityScheduledEvent_Call {
	return &MockEventDispatcher_SendActivityScheduledEvent_Call{Call: _e.mock.On("SendActivityScheduledEvent", workflowId, workflowRunId, activityId, activityRunId, maxRetries, currentTry, input)}
}

func (_c *MockEventDispatcher_SendActivityScheduledEvent_Call) Run(run func(workflowId string, workflowRunId string, activityId string, activityRunId string, maxRetries int32, currentTry int32, input []byte)) *MockEventDispatcher_SendActivityScheduledEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(int32), args[5].(int32), args[6].([]byte))
	})
	return _c
}

func (_c *MockEventDispatcher_SendActivityScheduledEvent_Call) Return(_a0 error) *MockEventDispatcher_SendActivityScheduledEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventDispatcher_SendActivityScheduledEvent_Call) RunAndReturn(run func(string, string, string, string, int32, int32, []byte) error) *MockEventDispatcher_SendActivityScheduledEvent_Call {
	_c.Call.Return(run)
	return _c
}

// SendActivityStartedEvent provides a mock function with given fields: workflowId, workflowRunId, activityId, activityRunId, maxRetries, currentTry, input
func (_m *MockEventDispatcher) SendActivityStartedEvent(workflowId string, workflowRunId string, activityId string, activityRunId string, maxRetries int32, currentTry int32, input []byte) error {
	ret := _m.Called(workflowId, workflowRunId, activityId, activityRunId, maxRetries, currentTry, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, int32, int32, []byte) error); ok {
		r0 = rf(workflowId, workflowRunId, activityId, activityRunId, maxRetries, currentTry, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventDispatcher_SendActivityStartedEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendActivityStartedEvent'
type MockEventDispatcher_SendActivityStartedEvent_Call struct {
	*mock.Call
}

// SendActivityStartedEvent is a helper method to define mock.On call
//   - workflowId string
//   - workflowRunId string
//   - activityId string
//   - activityRunId string
//   - maxRetries int32
//   - currentTry int32
//   - input []byte
func (_e *MockEventDispatcher_Expecter) SendActivityStartedEvent(workflowId interface{}, workflowRunId interface{}, activityId interface{}, activityRunId interface{}, maxRetries interface{}, currentTry interface{}, input interface{}) *MockEventDispatcher_SendActivityStartedEvent_Call {
	return &MockEventDispatcher_SendActivityStartedEvent_Call{Call: _e.mock.On("SendActivityStartedEvent", workflowId, workflowRunId, activityId, activityRunId, maxRetries, currentTry, input)}
}

func (_c *MockEventDispatcher_SendActivityStartedEvent_Call) Run(run func(workflowId string, workflowRunId string, activityId string, activityRunId string, maxRetries int32, currentTry int32, input []byte)) *MockEventDispatcher_SendActivityStartedEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(int32), args[5].(int32), args[6].([]byte))
	})
	return _c
}

func (_c *MockEventDispatcher_SendActivityStartedEvent_Call) Return(_a0 error) *MockEventDispatcher_SendActivityStartedEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventDispatcher_SendActivityStartedEvent_Call) RunAndReturn(run func(string, string, string, string, int32, int32, []byte) error) *MockEventDispatcher_SendActivityStartedEvent_Call {
	_c.Call.Return(run)
	return _c
}

// SendWorkflowFinishedInErrorEvent provides a mock function with given fields: workflowId, workflowRunId, input, err
func (_m *MockEventDispatcher) SendWorkflowFinishedInErrorEvent(workflowId string, workflowRunId string, input []byte, err error) error {
	ret := _m.Called(workflowId, workflowRunId, input, err)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []byte, error) error); ok {
		r0 = rf(workflowId, workflowRunId, input, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventDispatcher_SendWorkflowFinishedInErrorEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendWorkflowFinishedInErrorEvent'
type MockEventDispatcher_SendWorkflowFinishedInErrorEvent_Call struct {
	*mock.Call
}

// SendWorkflowFinishedInErrorEvent is a helper method to define mock.On call
//   - workflowId string
//   - workflowRunId string
//   - input []byte
//   - err error
func (_e *MockEventDispatcher_Expecter) SendWorkflowFinishedInErrorEvent(workflowId interface{}, workflowRunId interface{}, input interface{}, err interface{}) *MockEventDispatcher_SendWorkflowFinishedInErrorEvent_Call {
	return &MockEventDispatcher_SendWorkflowFinishedInErrorEvent_Call{Call: _e.mock.On("SendWorkflowFinishedInErrorEvent", workflowId, workflowRunId, input, err)}
}

func (_c *MockEventDispatcher_SendWorkflowFinishedInErrorEvent_Call) Run(run func(workflowId string, workflowRunId string, input []byte, err error)) *MockEventDispatcher_SendWorkflowFinishedInErrorEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]byte), args[3].(error))
	})
	return _c
}

func (_c *MockEventDispatcher_SendWorkflowFinishedInErrorEvent_Call) Return(_a0 error) *MockEventDispatcher_SendWorkflowFinishedInErrorEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventDispatcher_SendWorkflowFinishedInErrorEvent_Call) RunAndReturn(run func(string, string, []byte, error) error) *MockEventDispatcher_SendWorkflowFinishedInErrorEvent_Call {
	_c.Call.Return(run)
	return _c
}

// SendWorkflowFinishedInSuccessEvent provides a mock function with given fields: workflowId, workflowRunId, input, output
func (_m *MockEventDispatcher) SendWorkflowFinishedInSuccessEvent(workflowId string, workflowRunId string, input []byte, output []byte) error {
	ret := _m.Called(workflowId, workflowRunId, input, output)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []byte, []byte) error); ok {
		r0 = rf(workflowId, workflowRunId, input, output)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventDispatcher_SendWorkflowFinishedInSuccessEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendWorkflowFinishedInSuccessEvent'
type MockEventDispatcher_SendWorkflowFinishedInSuccessEvent_Call struct {
	*mock.Call
}

// SendWorkflowFinishedInSuccessEvent is a helper method to define mock.On call
//   - workflowId string
//   - workflowRunId string
//   - input []byte
//   - output []byte
func (_e *MockEventDispatcher_Expecter) SendWorkflowFinishedInSuccessEvent(workflowId interface{}, workflowRunId interface{}, input interface{}, output interface{}) *MockEventDispatcher_SendWorkflowFinishedInSuccessEvent_Call {
	return &MockEventDispatcher_SendWorkflowFinishedInSuccessEvent_Call{Call: _e.mock.On("SendWorkflowFinishedInSuccessEvent", workflowId, workflowRunId, input, output)}
}

func (_c *MockEventDispatcher_SendWorkflowFinishedInSuccessEvent_Call) Run(run func(workflowId string, workflowRunId string, input []byte, output []byte)) *MockEventDispatcher_SendWorkflowFinishedInSuccessEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]byte), args[3].([]byte))
	})
	return _c
}

func (_c *MockEventDispatcher_SendWorkflowFinishedInSuccessEvent_Call) Return(_a0 error) *MockEventDispatcher_SendWorkflowFinishedInSuccessEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventDispatcher_SendWorkflowFinishedInSuccessEvent_Call) RunAndReturn(run func(string, string, []byte, []byte) error) *MockEventDispatcher_SendWorkflowFinishedInSuccessEvent_Call {
	_c.Call.Return(run)
	return _c
}

// SendWorkflowScheduledEvent provides a mock function with given fields: workflowId, workflowRunId, input
func (_m *MockEventDispatcher) SendWorkflowScheduledEvent(workflowId string, workflowRunId string, input []byte) error {
	ret := _m.Called(workflowId, workflowRunId, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []byte) error); ok {
		r0 = rf(workflowId, workflowRunId, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventDispatcher_SendWorkflowScheduledEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendWorkflowScheduledEvent'
type MockEventDispatcher_SendWorkflowScheduledEvent_Call struct {
	*mock.Call
}

// SendWorkflowScheduledEvent is a helper method to define mock.On call
//   - workflowId string
//   - workflowRunId string
//   - input []byte
func (_e *MockEventDispatcher_Expecter) SendWorkflowScheduledEvent(workflowId interface{}, workflowRunId interface{}, input interface{}) *MockEventDispatcher_SendWorkflowScheduledEvent_Call {
	return &MockEventDispatcher_SendWorkflowScheduledEvent_Call{Call: _e.mock.On("SendWorkflowScheduledEvent", workflowId, workflowRunId, input)}
}

func (_c *MockEventDispatcher_SendWorkflowScheduledEvent_Call) Run(run func(workflowId string, workflowRunId string, input []byte)) *MockEventDispatcher_SendWorkflowScheduledEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *MockEventDispatcher_SendWorkflowScheduledEvent_Call) Return(_a0 error) *MockEventDispatcher_SendWorkflowScheduledEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventDispatcher_SendWorkflowScheduledEvent_Call) RunAndReturn(run func(string, string, []byte) error) *MockEventDispatcher_SendWorkflowScheduledEvent_Call {
	_c.Call.Return(run)
	return _c
}

// SendWorkflowStartedEvent provides a mock function with given fields: workflowId, workflowRunId, input
func (_m *MockEventDispatcher) SendWorkflowStartedEvent(workflowId string, workflowRunId string, input []byte) error {
	ret := _m.Called(workflowId, workflowRunId, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []byte) error); ok {
		r0 = rf(workflowId, workflowRunId, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventDispatcher_SendWorkflowStartedEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendWorkflowStartedEvent'
type MockEventDispatcher_SendWorkflowStartedEvent_Call struct {
	*mock.Call
}

// SendWorkflowStartedEvent is a helper method to define mock.On call
//   - workflowId string
//   - workflowRunId string
//   - input []byte
func (_e *MockEventDispatcher_Expecter) SendWorkflowStartedEvent(workflowId interface{}, workflowRunId interface{}, input interface{}) *MockEventDispatcher_SendWorkflowStartedEvent_Call {
	return &MockEventDispatcher_SendWorkflowStartedEvent_Call{Call: _e.mock.On("SendWorkflowStartedEvent", workflowId, workflowRunId, input)}
}

func (_c *MockEventDispatcher_SendWorkflowStartedEvent_Call) Run(run func(workflowId string, workflowRunId string, input []byte)) *MockEventDispatcher_SendWorkflowStartedEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *MockEventDispatcher_SendWorkflowStartedEvent_Call) Return(_a0 error) *MockEventDispatcher_SendWorkflowStartedEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventDispatcher_SendWorkflowStartedEvent_Call) RunAndReturn(run func(string, string, []byte) error) *MockEventDispatcher_SendWorkflowStartedEvent_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockEventDispatcher interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEventDispatcher creates a new instance of MockEventDispatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEventDispatcher(t mockConstructorTestingTNewMockEventDispatcher) *MockEventDispatcher {
	mock := &MockEventDispatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
