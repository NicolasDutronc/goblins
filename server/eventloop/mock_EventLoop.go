// Code generated by mockery v2.28.2. DO NOT EDIT.

package eventloop

import (
	context "context"

	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockEventLoop is an autogenerated mock type for the EventLoop type
type MockEventLoop struct {
	mock.Mock
}

type MockEventLoop_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventLoop) EXPECT() *MockEventLoop_Expecter {
	return &MockEventLoop_Expecter{mock: &_m.Mock}
}

// RegisterHandler provides a mock function with given fields: id, callback
func (_m *MockEventLoop) RegisterHandler(id uuid.UUID, callback EventHandler) {
	_m.Called(id, callback)
}

// MockEventLoop_RegisterHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterHandler'
type MockEventLoop_RegisterHandler_Call struct {
	*mock.Call
}

// RegisterHandler is a helper method to define mock.On call
//   - id uuid.UUID
//   - callback EventHandler
func (_e *MockEventLoop_Expecter) RegisterHandler(id interface{}, callback interface{}) *MockEventLoop_RegisterHandler_Call {
	return &MockEventLoop_RegisterHandler_Call{Call: _e.mock.On("RegisterHandler", id, callback)}
}

func (_c *MockEventLoop_RegisterHandler_Call) Run(run func(id uuid.UUID, callback EventHandler)) *MockEventLoop_RegisterHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(EventHandler))
	})
	return _c
}

func (_c *MockEventLoop_RegisterHandler_Call) Return() *MockEventLoop_RegisterHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLoop_RegisterHandler_Call) RunAndReturn(run func(uuid.UUID, EventHandler)) *MockEventLoop_RegisterHandler_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterSystemHandler provides a mock function with given fields: handler
func (_m *MockEventLoop) RegisterSystemHandler(handler EventHandler) func() {
	ret := _m.Called(handler)

	var r0 func()
	if rf, ok := ret.Get(0).(func(EventHandler) func()); ok {
		r0 = rf(handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func())
		}
	}

	return r0
}

// MockEventLoop_RegisterSystemHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterSystemHandler'
type MockEventLoop_RegisterSystemHandler_Call struct {
	*mock.Call
}

// RegisterSystemHandler is a helper method to define mock.On call
//   - handler EventHandler
func (_e *MockEventLoop_Expecter) RegisterSystemHandler(handler interface{}) *MockEventLoop_RegisterSystemHandler_Call {
	return &MockEventLoop_RegisterSystemHandler_Call{Call: _e.mock.On("RegisterSystemHandler", handler)}
}

func (_c *MockEventLoop_RegisterSystemHandler_Call) Run(run func(handler EventHandler)) *MockEventLoop_RegisterSystemHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EventHandler))
	})
	return _c
}

func (_c *MockEventLoop_RegisterSystemHandler_Call) Return(_a0 func()) *MockEventLoop_RegisterSystemHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventLoop_RegisterSystemHandler_Call) RunAndReturn(run func(EventHandler) func()) *MockEventLoop_RegisterSystemHandler_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx
func (_m *MockEventLoop) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventLoop_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockEventLoop_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockEventLoop_Expecter) Run(ctx interface{}) *MockEventLoop_Run_Call {
	return &MockEventLoop_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockEventLoop_Run_Call) Run(run func(ctx context.Context)) *MockEventLoop_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockEventLoop_Run_Call) Return(_a0 error) *MockEventLoop_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventLoop_Run_Call) RunAndReturn(run func(context.Context) error) *MockEventLoop_Run_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterHandler provides a mock function with given fields: id
func (_m *MockEventLoop) UnregisterHandler(id uuid.UUID) {
	_m.Called(id)
}

// MockEventLoop_UnregisterHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterHandler'
type MockEventLoop_UnregisterHandler_Call struct {
	*mock.Call
}

// UnregisterHandler is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockEventLoop_Expecter) UnregisterHandler(id interface{}) *MockEventLoop_UnregisterHandler_Call {
	return &MockEventLoop_UnregisterHandler_Call{Call: _e.mock.On("UnregisterHandler", id)}
}

func (_c *MockEventLoop_UnregisterHandler_Call) Run(run func(id uuid.UUID)) *MockEventLoop_UnregisterHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockEventLoop_UnregisterHandler_Call) Return() *MockEventLoop_UnregisterHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventLoop_UnregisterHandler_Call) RunAndReturn(run func(uuid.UUID)) *MockEventLoop_UnregisterHandler_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockEventLoop interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEventLoop creates a new instance of MockEventLoop. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEventLoop(t mockConstructorTestingTNewMockEventLoop) *MockEventLoop {
	mock := &MockEventLoop{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
