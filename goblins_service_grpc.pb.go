// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: goblins_service.proto

package goblins

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GoblinsService_RegisterActivity_FullMethodName      = "/goblins.GoblinsService/RegisterActivity"
	GoblinsService_RegisterWorkflow_FullMethodName      = "/goblins.GoblinsService/RegisterWorkflow"
	GoblinsService_ScheduleActivity_FullMethodName      = "/goblins.GoblinsService/ScheduleActivity"
	GoblinsService_ScheduleWorkflow_FullMethodName      = "/goblins.GoblinsService/ScheduleWorkflow"
	GoblinsService_GetActivityResult_FullMethodName     = "/goblins.GoblinsService/GetActivityResult"
	GoblinsService_GetWorkflowResult_FullMethodName     = "/goblins.GoblinsService/GetWorkflowResult"
	GoblinsService_GetActivityRunHistory_FullMethodName = "/goblins.GoblinsService/GetActivityRunHistory"
	GoblinsService_GetWorkflowRunHistory_FullMethodName = "/goblins.GoblinsService/GetWorkflowRunHistory"
)

// GoblinsServiceClient is the client API for GoblinsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoblinsServiceClient interface {
	RegisterActivity(ctx context.Context, in *RegisterActivityRequest, opts ...grpc.CallOption) (*RegisterActivityResponse, error)
	RegisterWorkflow(ctx context.Context, in *RegisterWorkflowRequest, opts ...grpc.CallOption) (*RegisterWorkflowResponse, error)
	ScheduleActivity(ctx context.Context, in *ScheduleActivityRequest, opts ...grpc.CallOption) (*ScheduleActivityResponse, error)
	ScheduleWorkflow(ctx context.Context, in *ScheduleWorkflowRequest, opts ...grpc.CallOption) (*ScheduleWorkflowResponse, error)
	GetActivityResult(ctx context.Context, in *GetActivityResultRequest, opts ...grpc.CallOption) (*GetActivityResultResponse, error)
	GetWorkflowResult(ctx context.Context, in *GetWorkflowResultRequest, opts ...grpc.CallOption) (*GetWorkflowResultResponse, error)
	GetActivityRunHistory(ctx context.Context, in *GetActivityRunHistoryRequest, opts ...grpc.CallOption) (*GetActivityRunHistoryResponse, error)
	GetWorkflowRunHistory(ctx context.Context, in *GetWorkflowRunHistoryRequest, opts ...grpc.CallOption) (*GetWorkflowRunHistoryResponse, error)
}

type goblinsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoblinsServiceClient(cc grpc.ClientConnInterface) GoblinsServiceClient {
	return &goblinsServiceClient{cc}
}

func (c *goblinsServiceClient) RegisterActivity(ctx context.Context, in *RegisterActivityRequest, opts ...grpc.CallOption) (*RegisterActivityResponse, error) {
	out := new(RegisterActivityResponse)
	err := c.cc.Invoke(ctx, GoblinsService_RegisterActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goblinsServiceClient) RegisterWorkflow(ctx context.Context, in *RegisterWorkflowRequest, opts ...grpc.CallOption) (*RegisterWorkflowResponse, error) {
	out := new(RegisterWorkflowResponse)
	err := c.cc.Invoke(ctx, GoblinsService_RegisterWorkflow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goblinsServiceClient) ScheduleActivity(ctx context.Context, in *ScheduleActivityRequest, opts ...grpc.CallOption) (*ScheduleActivityResponse, error) {
	out := new(ScheduleActivityResponse)
	err := c.cc.Invoke(ctx, GoblinsService_ScheduleActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goblinsServiceClient) ScheduleWorkflow(ctx context.Context, in *ScheduleWorkflowRequest, opts ...grpc.CallOption) (*ScheduleWorkflowResponse, error) {
	out := new(ScheduleWorkflowResponse)
	err := c.cc.Invoke(ctx, GoblinsService_ScheduleWorkflow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goblinsServiceClient) GetActivityResult(ctx context.Context, in *GetActivityResultRequest, opts ...grpc.CallOption) (*GetActivityResultResponse, error) {
	out := new(GetActivityResultResponse)
	err := c.cc.Invoke(ctx, GoblinsService_GetActivityResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goblinsServiceClient) GetWorkflowResult(ctx context.Context, in *GetWorkflowResultRequest, opts ...grpc.CallOption) (*GetWorkflowResultResponse, error) {
	out := new(GetWorkflowResultResponse)
	err := c.cc.Invoke(ctx, GoblinsService_GetWorkflowResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goblinsServiceClient) GetActivityRunHistory(ctx context.Context, in *GetActivityRunHistoryRequest, opts ...grpc.CallOption) (*GetActivityRunHistoryResponse, error) {
	out := new(GetActivityRunHistoryResponse)
	err := c.cc.Invoke(ctx, GoblinsService_GetActivityRunHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goblinsServiceClient) GetWorkflowRunHistory(ctx context.Context, in *GetWorkflowRunHistoryRequest, opts ...grpc.CallOption) (*GetWorkflowRunHistoryResponse, error) {
	out := new(GetWorkflowRunHistoryResponse)
	err := c.cc.Invoke(ctx, GoblinsService_GetWorkflowRunHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoblinsServiceServer is the server API for GoblinsService service.
// All implementations must embed UnimplementedGoblinsServiceServer
// for forward compatibility
type GoblinsServiceServer interface {
	RegisterActivity(context.Context, *RegisterActivityRequest) (*RegisterActivityResponse, error)
	RegisterWorkflow(context.Context, *RegisterWorkflowRequest) (*RegisterWorkflowResponse, error)
	ScheduleActivity(context.Context, *ScheduleActivityRequest) (*ScheduleActivityResponse, error)
	ScheduleWorkflow(context.Context, *ScheduleWorkflowRequest) (*ScheduleWorkflowResponse, error)
	GetActivityResult(context.Context, *GetActivityResultRequest) (*GetActivityResultResponse, error)
	GetWorkflowResult(context.Context, *GetWorkflowResultRequest) (*GetWorkflowResultResponse, error)
	GetActivityRunHistory(context.Context, *GetActivityRunHistoryRequest) (*GetActivityRunHistoryResponse, error)
	GetWorkflowRunHistory(context.Context, *GetWorkflowRunHistoryRequest) (*GetWorkflowRunHistoryResponse, error)
	mustEmbedUnimplementedGoblinsServiceServer()
}

// UnimplementedGoblinsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGoblinsServiceServer struct {
}

func (UnimplementedGoblinsServiceServer) RegisterActivity(context.Context, *RegisterActivityRequest) (*RegisterActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterActivity not implemented")
}
func (UnimplementedGoblinsServiceServer) RegisterWorkflow(context.Context, *RegisterWorkflowRequest) (*RegisterWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWorkflow not implemented")
}
func (UnimplementedGoblinsServiceServer) ScheduleActivity(context.Context, *ScheduleActivityRequest) (*ScheduleActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleActivity not implemented")
}
func (UnimplementedGoblinsServiceServer) ScheduleWorkflow(context.Context, *ScheduleWorkflowRequest) (*ScheduleWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleWorkflow not implemented")
}
func (UnimplementedGoblinsServiceServer) GetActivityResult(context.Context, *GetActivityResultRequest) (*GetActivityResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivityResult not implemented")
}
func (UnimplementedGoblinsServiceServer) GetWorkflowResult(context.Context, *GetWorkflowResultRequest) (*GetWorkflowResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowResult not implemented")
}
func (UnimplementedGoblinsServiceServer) GetActivityRunHistory(context.Context, *GetActivityRunHistoryRequest) (*GetActivityRunHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivityRunHistory not implemented")
}
func (UnimplementedGoblinsServiceServer) GetWorkflowRunHistory(context.Context, *GetWorkflowRunHistoryRequest) (*GetWorkflowRunHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowRunHistory not implemented")
}
func (UnimplementedGoblinsServiceServer) mustEmbedUnimplementedGoblinsServiceServer() {}

// UnsafeGoblinsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoblinsServiceServer will
// result in compilation errors.
type UnsafeGoblinsServiceServer interface {
	mustEmbedUnimplementedGoblinsServiceServer()
}

func RegisterGoblinsServiceServer(s grpc.ServiceRegistrar, srv GoblinsServiceServer) {
	s.RegisterService(&GoblinsService_ServiceDesc, srv)
}

func _GoblinsService_RegisterActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoblinsServiceServer).RegisterActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoblinsService_RegisterActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoblinsServiceServer).RegisterActivity(ctx, req.(*RegisterActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoblinsService_RegisterWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoblinsServiceServer).RegisterWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoblinsService_RegisterWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoblinsServiceServer).RegisterWorkflow(ctx, req.(*RegisterWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoblinsService_ScheduleActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoblinsServiceServer).ScheduleActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoblinsService_ScheduleActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoblinsServiceServer).ScheduleActivity(ctx, req.(*ScheduleActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoblinsService_ScheduleWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoblinsServiceServer).ScheduleWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoblinsService_ScheduleWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoblinsServiceServer).ScheduleWorkflow(ctx, req.(*ScheduleWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoblinsService_GetActivityResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivityResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoblinsServiceServer).GetActivityResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoblinsService_GetActivityResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoblinsServiceServer).GetActivityResult(ctx, req.(*GetActivityResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoblinsService_GetWorkflowResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoblinsServiceServer).GetWorkflowResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoblinsService_GetWorkflowResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoblinsServiceServer).GetWorkflowResult(ctx, req.(*GetWorkflowResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoblinsService_GetActivityRunHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivityRunHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoblinsServiceServer).GetActivityRunHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoblinsService_GetActivityRunHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoblinsServiceServer).GetActivityRunHistory(ctx, req.(*GetActivityRunHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoblinsService_GetWorkflowRunHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowRunHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoblinsServiceServer).GetWorkflowRunHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoblinsService_GetWorkflowRunHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoblinsServiceServer).GetWorkflowRunHistory(ctx, req.(*GetWorkflowRunHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoblinsService_ServiceDesc is the grpc.ServiceDesc for GoblinsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoblinsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goblins.GoblinsService",
	HandlerType: (*GoblinsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterActivity",
			Handler:    _GoblinsService_RegisterActivity_Handler,
		},
		{
			MethodName: "RegisterWorkflow",
			Handler:    _GoblinsService_RegisterWorkflow_Handler,
		},
		{
			MethodName: "ScheduleActivity",
			Handler:    _GoblinsService_ScheduleActivity_Handler,
		},
		{
			MethodName: "ScheduleWorkflow",
			Handler:    _GoblinsService_ScheduleWorkflow_Handler,
		},
		{
			MethodName: "GetActivityResult",
			Handler:    _GoblinsService_GetActivityResult_Handler,
		},
		{
			MethodName: "GetWorkflowResult",
			Handler:    _GoblinsService_GetWorkflowResult_Handler,
		},
		{
			MethodName: "GetActivityRunHistory",
			Handler:    _GoblinsService_GetActivityRunHistory_Handler,
		},
		{
			MethodName: "GetWorkflowRunHistory",
			Handler:    _GoblinsService_GetWorkflowRunHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goblins_service.proto",
}
